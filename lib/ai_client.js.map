{"version":3,"file":"ai_client.js","names":["_axios","_interopRequireDefault","require","_jellyFassException","e","__esModule","default","QueryType","AIClient","LOOKUP_ENDPOINT","QUERY_SERVICE_ENDPOINT","HEADER_API_KEY","HEADER_TOKEN","queryType","DIRECT","functions","constructor","config","getToken","JellyFaasException","httpClient","axios","create","validateStatus","connectVectorDatabase","databaseName","connectionString","vectorDatabaseName","vectorDatabaseConnectionString","RAG","connectRelationalDatabase","tables","rmdbsConnectionString","rdbmsTables","RDBMS","lookupFunction","jellyFaasFunction","functionId","id","queryParams","functionVersion","version","undefined","debug","lookupResponse","get","headers","getApiKey","params","status","functionDetails","dns","data","requirements","push","FUNCTION","error","Error","errorMessage","isAxiosError","message","console","query","ragQuery","directQuery","rdbmsQuery","functionQuery","response","post","body","vector_mongo_collection","vector_mongo_connection_string","rag_query","log","exports"],"sources":["../src/ai_client.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosResponse } from 'axios';\r\nimport { JellyFaasException } from './exceptions/jellyFassException'; // Import exceptions\r\nimport { JellyFaasFunction } from './structs/jellyFaasFunction';\r\nimport { AIConfig } from './ai_config';\r\n\r\nenum QueryType {\r\n    DIRECT,\r\n    RAG,\r\n    RDBMS,\r\n    FUNCTION\r\n}\r\n\r\nexport class AIClient {\r\n\r\n    private static LOOKUP_ENDPOINT = 'https://api.jellyfaas.com/auth-service/v1/lookup'\r\n    private static QUERY_SERVICE_ENDPOINT = 'https://ai.jellyfaas.com/query-service/v1'\r\n    private static HEADER_API_KEY = \"x-jf-apikey\"\r\n    private static HEADER_TOKEN = 'jfwt';\r\n\r\n\r\n    private config: AIConfig;\r\n    private httpClient: AxiosInstance;\r\n    private queryType: QueryType = QueryType.DIRECT;\r\n    \r\n    // Function calling querying\r\n    private functions: Array<JellyFaasFunction> = [];\r\n\r\n    // Vector DB querying\r\n    private vectorDatabaseName!: string;\r\n    private vectorDatabaseConnectionString!: string;\r\n    \r\n    // RDBMS querying\r\n    private rdbmsTables!: Array<string>\r\n    private rmdbsConnectionString!: string\r\n\r\n    constructor(config: AIConfig) {\r\n        if (!config || !config.getToken()) {\r\n            throw new JellyFaasException('Config cannot be null');\r\n        }\r\n        this.config = config;\r\n        this.httpClient = axios.create({\r\n            validateStatus: function () {\r\n                // Accept all HTTP statuses as \"valid\"\r\n                // Axios won't throw for non-2xx statuses.\r\n                return true;\r\n            },\r\n        });    \r\n    }\r\n\r\n    async connectVectorDatabase(databaseName: string, connectionString: string = ''){\r\n        if (databaseName == '') {\r\n            throw new JellyFaasException('Invalid database name')\r\n        }\r\n        \r\n        this.vectorDatabaseName = databaseName\r\n        if (connectionString != ''){\r\n            this.vectorDatabaseConnectionString = connectionString\r\n        }\r\n        this.queryType = QueryType.RAG\r\n        return this\r\n    }\r\n\r\n    async connectRelationalDatabase(connectionString:string, tables:Array<string>){\r\n        if (connectionString == '') {\r\n            throw new JellyFaasException('Invalid connection string')\r\n        }\r\n        if (!tables) {\r\n            throw new JellyFaasException('Invalid tables')\r\n        }\r\n        \r\n        this.rmdbsConnectionString = connectionString\r\n        this.rdbmsTables = tables\r\n        this.queryType = QueryType.RDBMS\r\n        return this\r\n    }\r\n\r\n    async lookupFunction(jellyFaasFunction: JellyFaasFunction): Promise<AIClient> {\r\n        if (!jellyFaasFunction || typeof jellyFaasFunction !== 'object') {\r\n            throw new JellyFaasException('Expected function object');\r\n        }\r\n\r\n        const functionId = jellyFaasFunction.id;\r\n        if (!functionId) {\r\n            throw new JellyFaasException('Expected function id');\r\n        }\r\n\r\n        const queryParams: Record<string, unknown> = { id: functionId };\r\n\r\n        const functionVersion = jellyFaasFunction.version;\r\n        if (functionVersion !== null && functionVersion !== undefined) {\r\n            queryParams['version'] = functionVersion;\r\n        }\r\n\r\n        this.debug(`Starting lookupFunction method with functionId=${functionId}`);\r\n\r\n        try {\r\n            const lookupResponse: AxiosResponse = await this.httpClient.get(\r\n                AIClient.LOOKUP_ENDPOINT,\r\n                {\r\n                    headers: { [AIClient.HEADER_API_KEY]: this.config.getApiKey() ?? ''},\r\n                    params: queryParams,\r\n                }\r\n            );\r\n\r\n            this.debug(`Received response: ${lookupResponse.status}`);\r\n            if (lookupResponse.status < 200 || lookupResponse.status >= 300) {\r\n                throw new JellyFaasException(`HTTP error: ${lookupResponse.status}`);\r\n            }\r\n\r\n            const functionDetails = {\r\n                id: functionId,\r\n                version: functionVersion,\r\n                dns: lookupResponse.data.dns || null,\r\n                requirements: lookupResponse.data.requirements || null,\r\n            };\r\n\r\n            this.functions.push(functionDetails);\r\n            this.debug('Successfully looked up function');\r\n\r\n            this.queryType = QueryType.FUNCTION\r\n            return this;\r\n        } catch (error: unknown) {\r\n            if (error instanceof Error) {\r\n                // Now TypeScript knows `error` is an instance of `Error`\r\n                const errorMessage = (error as { isAxiosError?: boolean; message: string }).isAxiosError\r\n                    ? `HTTP error occurred: ${error.message}`\r\n                    : `Other error occurred: ${error.message}`;\r\n                \r\n                console.error(errorMessage);\r\n                throw new JellyFaasException(errorMessage);\r\n            } else {\r\n                // Handle case where the error is not an instance of Error (e.g., if it's a string or other type)\r\n                console.error('An unknown error occurred.');\r\n                throw new JellyFaasException('An unknown error occurred.');\r\n            }\r\n        }\r\n    }\r\n\r\n    async query(query: string, ragQuery: string = \"\"): Promise<unknown> {\r\n        \r\n        switch (this.queryType) {\r\n            case QueryType.DIRECT:\r\n                return await this.directQuery(query)\r\n            case QueryType.RAG:\r\n                return await this.ragQuery(query, ragQuery)\r\n            case QueryType.RDBMS:\r\n                return await this.rdbmsQuery(query)\r\n            case QueryType.FUNCTION:\r\n                return await this.functionQuery(query);\r\n        }\r\n    }\r\n\r\n    private async rdbmsQuery(query: string) {\r\n        try {\r\n            const response: AxiosResponse = await this.httpClient.post(\r\n                AIClient.QUERY_SERVICE_ENDPOINT+\"/rdbms\",\r\n                {\r\n                    \"query\": query,\r\n                    \"mysql_connection_string\": this.rmdbsConnectionString,\r\n                    \"tables\":this.rdbmsTables\r\n                },\r\n                {\r\n                    headers: { [AIClient.HEADER_TOKEN]: this.config.getToken() ?? '' },\r\n\r\n                }\r\n            )\r\n            return response.data;\r\n        } catch (error: unknown) {\r\n            if (error instanceof Error) {\r\n                // Now TypeScript knows `error` is an instance of `Error`\r\n                const errorMessage = (error as { isAxiosError?: boolean; message: string }).isAxiosError\r\n                    ? `HTTP error occurred: ${error.message}`\r\n                    : `Other error occurred: ${error.message}`;\r\n                \r\n                console.error(errorMessage);\r\n                throw new JellyFaasException(errorMessage);\r\n            } else {\r\n                // Handle case where the error is not an instance of Error (e.g., if it's a string or other type)\r\n                console.error('An unknown error occurred.');\r\n                throw new JellyFaasException('An unknown error occurred.');\r\n            }\r\n        }\r\n    }\r\n\r\n    private async directQuery(query: string) {\r\n        try {\r\n            const response: AxiosResponse = await this.httpClient.post(\r\n                AIClient.QUERY_SERVICE_ENDPOINT+\"/query\",\r\n                {\r\n                    \"query\": query\r\n                },\r\n                {\r\n                    headers: { [AIClient.HEADER_TOKEN]: this.config.getToken() ?? '' },\r\n\r\n                }\r\n            )\r\n            return response.data;\r\n        } catch (error: unknown) {\r\n            if (error instanceof Error) {\r\n                // Now TypeScript knows `error` is an instance of `Error`\r\n                const errorMessage = (error as { isAxiosError?: boolean; message: string }).isAxiosError\r\n                    ? `HTTP error occurred: ${error.message}`\r\n                    : `Other error occurred: ${error.message}`;\r\n                \r\n                console.error(errorMessage);\r\n                throw new JellyFaasException(errorMessage);\r\n            } else {\r\n                // Handle case where the error is not an instance of Error (e.g., if it's a string or other type)\r\n                console.error('An unknown error occurred.');\r\n                throw new JellyFaasException('An unknown error occurred.');\r\n            }\r\n        }\r\n    }\r\n    \r\n    \r\n    private async ragQuery(query: string, ragQuery: string = \"\") {\r\n        try {\r\n\r\n            let body: { \r\n                query: string; \r\n                rag_query?: string; \r\n                vector_mongo_collection: string; \r\n                vector_mongo_connection_string?: string \r\n            } = {\r\n                query: query,\r\n                vector_mongo_collection: this.vectorDatabaseName\r\n            };\r\n            \r\n            if (this.vectorDatabaseConnectionString) {\r\n                body = { \r\n                    ...body, \r\n                    vector_mongo_connection_string: this.vectorDatabaseConnectionString \r\n                };\r\n            }\r\n\r\n            if (ragQuery) {\r\n                body = { \r\n                    ...body, \r\n                    rag_query: ragQuery \r\n                };\r\n            }\r\n\r\n            const response: AxiosResponse = await this.httpClient.post(\r\n                AIClient.QUERY_SERVICE_ENDPOINT+\"/vectordb\", body,\r\n                {\r\n                    headers: { [AIClient.HEADER_TOKEN]: this.config.getToken() ?? '' },\r\n\r\n                }\r\n            )\r\n            return response.data;\r\n        } catch (error: unknown) {\r\n            if (error instanceof Error) {\r\n                // Now TypeScript knows `error` is an instance of `Error`\r\n                const errorMessage = (error as { isAxiosError?: boolean; message: string }).isAxiosError\r\n                    ? `HTTP error occurred: ${error.message}`\r\n                    : `Other error occurred: ${error.message}`;\r\n                \r\n                console.error(errorMessage);\r\n                throw new JellyFaasException(errorMessage);\r\n            } else {\r\n                // Handle case where the error is not an instance of Error (e.g., if it's a string or other type)\r\n                console.error('An unknown error occurred.');\r\n                throw new JellyFaasException('An unknown error occurred.');\r\n            }\r\n        }\r\n    }\r\n        \r\n    private async functionQuery(query: string) {\r\n        try {\r\n            const response: AxiosResponse = await this.httpClient.post(\r\n                AIClient.QUERY_SERVICE_ENDPOINT+\"/function\",\r\n                {\r\n                    \"query\": query,\r\n                    \"function\": this.functions[0].id,\r\n                    \"ai_platform\": \"gemini\"\r\n                },\r\n                {\r\n                    headers: { [AIClient.HEADER_TOKEN]: this.config.getToken() ?? ''},\r\n                }\r\n            )\r\n            return response.data\r\n\r\n        } catch (error: unknown) {\r\n            if (error instanceof Error) {\r\n                // Now TypeScript knows `error` is an instance of `Error`\r\n                const errorMessage = (error as { isAxiosError?: boolean; message: string }).isAxiosError\r\n                    ? `HTTP error occurred: ${error.message}`\r\n                    : `Other error occurred: ${error.message}`;\r\n                \r\n                console.error(errorMessage);\r\n                throw new JellyFaasException(errorMessage);\r\n            } else {\r\n                // Handle case where the error is not an instance of Error (e.g., if it's a string or other type)\r\n                console.error('An unknown error occurred.');\r\n                throw new JellyFaasException('An unknown error occurred.');\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private debug(message: string): void {\r\n        console.log(`[DEBUG] ${message}`);\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]}