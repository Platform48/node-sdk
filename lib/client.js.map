{"version":3,"file":"client.js","names":["_axios","_interopRequireDefault","require","_","_functionRequirements","_functionRequirementsBodyType","_jellyFassException","_fs","path","_interopRequireWildcard","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","Client","LOOKUP_ENDPOINT","HEADER_API_KEY","HEADER_TOKEN","version","functionRequirements","queryParams","body","Buffer","from","bodyType","FunctionRequirementsBodyType","NONE","constructor","config","getToken","JellyFaasException","httpClient","axios","create","validateStatus","setVersion","lookupFunction","functionId","url","headers","getApiKey","response","status","data","functionDNS","dns","FunctionRequirements","requirements","decodeSchemas","error","Error","message","setFunctionQueryParams","doValidation","validateQueryParams","setFunctionJsonBody","getInputBodyType","schema","getInputSchema","validateSchema","JSON","stringify","setFunctionFileBody","filePath","inputFile","inputSchema","fileName","basename","extension","extname","slice","extensions","includes","join","stats","fsPromises","stat","buffer","alloc","size","fileHandle","open","read","close","FILE","invoke","outputType","checkStatus","inputType","getTypeName","URLSearchParams","toString","request","method","requestType","responseType","statusText","jsonString","jsonData","parse","getStatusCode","params","forEach","param","required","name","ajv","Ajv2020","validate","compile","errors","map","err","instancePath","value","undefined","exports"],"sources":["../src/client.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosResponse } from 'axios';\r\nimport Ajv2020, { ValidateFunction } from 'ajv/dist/2020';\r\n\r\nimport { Config } from './config'; // Assuming the Config class is implemented\r\nimport { FunctionRequirements } from './structs/functionRequirements'; // Import necessary types\r\nimport { FunctionRequirementsBodyType } from './structs/functionRequirementsBodyType'\r\nimport { JellyFaasException } from './exceptions/jellyFassException'; // Import exceptions\r\nimport { promises as fsPromises } from 'fs';\r\nimport * as path from 'path';\r\nimport { ClassConstructor } from 'class-transformer';\r\nimport FunctionRequirementsFile from './structs/functionRequirementsFile';\r\n\r\nexport class Client {\r\n    \r\n    private static LOOKUP_ENDPOINT = 'https://api.jellyfaas.com/auth-service/v1/lookup';\r\n    private static HEADER_API_KEY = 'x-jf-apikey';\r\n    private static HEADER_TOKEN = 'jfwt';\r\n    \r\n    private config: Config;\r\n    private httpClient: AxiosInstance;\r\n    private version: number | null = null;\r\n    private functionRequirements: FunctionRequirements | null = null;\r\n    private functionDNS!: string;\r\n    private queryParams: Record<string, string> = {};\r\n    private body: Buffer = Buffer.from([]);\r\n    private bodyType: FunctionRequirementsBodyType = FunctionRequirementsBodyType.NONE;\r\n    private response!: AxiosResponse;\r\n\r\n    constructor(config: Config) {\r\n        if (!config || !config.getToken()) {\r\n            throw new JellyFaasException('Config cannot be null');\r\n        }\r\n        this.config = config;\r\n        this.httpClient = axios.create({\r\n            validateStatus: function () {\r\n                // Accept all HTTP statuses as \"valid\"\r\n                // Axios won't throw for non-2xx statuses.\r\n                return true;\r\n            },\r\n        });    \r\n    }\r\n    \r\n    setVersion(version: number): Client {\r\n        if (version <= 0) {\r\n            throw new JellyFaasException('Version must be a positive int');\r\n        }\r\n        this.version = version;\r\n        return this;\r\n    }\r\n\r\n    async lookupFunction(functionId: string): Promise<Client> {\r\n        if (!functionId) {\r\n            throw new JellyFaasException('Invalid parameter: functionId must be a string');\r\n        }\r\n\r\n        const url = `${Client.LOOKUP_ENDPOINT}?id=${functionId}${this.version ? `&version=${this.version}` : ''}`;\r\n        const headers = {\r\n            [Client.HEADER_API_KEY]: this.config.getApiKey() ?? '',\r\n        };\r\n\r\n        try {\r\n            const response = await this.httpClient.get(url, { headers });\r\n            \r\n            if (response.status == 404) {\r\n                throw new JellyFaasException('Function does not exist.');\r\n            }\r\n\r\n\r\n            const data = response.data;\r\n            \r\n            this.functionDNS = data.dns;\r\n            this.functionRequirements = new FunctionRequirements(data.requirements);\r\n\r\n            this.functionRequirements.decodeSchemas();\r\n            //this.functionRequirements.checkInputs();\r\n            //this.functionRequirements.checkOutputs();\r\n            //console.log(JSON.stringify( data, null, ' '))\r\n\r\n            return this;\r\n        } catch (error) {\r\n            if (error instanceof Error) {\r\n                throw new JellyFaasException(`Function lookup failed: ${error.message}`);\r\n            } else {\r\n                throw new JellyFaasException(\"Function lookup failed: Unknown error occurred\");\r\n            }        \r\n        }\r\n    }\r\n\r\n    setFunctionQueryParams(queryParams: Record<string, string>, doValidation = true): Client {\r\n        if (doValidation) {\r\n            this.validateQueryParams(queryParams);\r\n        }\r\n        this.queryParams = queryParams;\r\n        return this;\r\n    }\r\n\r\n    setFunctionJsonBody(body: object): Client {\r\n        if (this.functionRequirements?.getInputBodyType() !== \"JSON\") {\r\n            throw new JellyFaasException('Function does not take JSON body.');\r\n        }\r\n        if (this.bodyType !== FunctionRequirementsBodyType.NONE) {\r\n            throw new JellyFaasException('Body already set.');\r\n        }\r\n        if (!body) {\r\n            throw new JellyFaasException('Function requires a body');\r\n        }\r\n        \r\n        const schema = this.functionRequirements.getInputSchema();\r\n        \r\n        this.validateSchema(body, schema as Record<string, unknown>);\r\n        \r\n        this.body = Buffer.from(JSON.stringify(body)); // Converts the JSON string to a byte array.\r\n        this.bodyType = FunctionRequirementsBodyType.JSON;\r\n        return this;\r\n    }\r\n\r\n    async setFunctionFileBody(filePath: string): Promise<Client> {\r\n        // Validate the input body type to ensure it's a file\r\n        if (this.functionRequirements?.getInputBodyType() !== \"FILE\") {\r\n            throw new JellyFaasException('Function does not take File body.');\r\n        }\r\n\r\n        // Check if body is already set\r\n        if (this.bodyType !== FunctionRequirementsBodyType.NONE) {\r\n            throw new JellyFaasException('Body already set.');\r\n        }\r\n\r\n        try {\r\n            // Assuming FunctionRequirementsFile is an object that has an extensions property (Array of strings)\r\n            const inputFile = this.functionRequirements?.inputSchema as FunctionRequirementsFile;\r\n            if (!inputFile) {\r\n                throw new JellyFaasException('No file requirement found.');\r\n            }\r\n\r\n            // Get the file name and extension from filePath\r\n            const fileName = path.basename(filePath);\r\n            const extension = path.extname(fileName).slice(1); // Extract file extension without the dot\r\n\r\n            if (!extension) {\r\n                throw new JellyFaasException('File has no extension.');\r\n            }\r\n\r\n            // Check if the file extension is valid\r\n            if (!inputFile.extensions?.includes(extension)) {\r\n                throw new JellyFaasException(`Invalid file type. Allowed types: ${inputFile.extensions?.join(', ')}`);\r\n            }\r\n\r\n\r\n            // Read the file content into a buffer\r\n            const stats = await fsPromises.stat(filePath); // Get file stats\r\n            const buffer = Buffer.alloc(stats.size); // Allocate buffer for the file content\r\n\r\n            // Read the file content into the buffer\r\n            const fileHandle = await fsPromises.open(filePath, 'r'); // Open the file for reading\r\n            await fileHandle.read(buffer, 0, stats.size, 0); // Read the file content into the buffer\r\n            await fileHandle.close(); // Close the file handle after reading\r\n\r\n            // Set the body to the file content\r\n            this.body = buffer;\r\n            this.bodyType = FunctionRequirementsBodyType.FILE;\r\n\r\n            return this;\r\n        } catch (error) {\r\n            if (error instanceof Error) {\r\n                throw new JellyFaasException(`Error processing file: ${error.message}`);\r\n            } else {\r\n                throw new JellyFaasException('Error processing file: Unknown error occurred.');\r\n            }\r\n        }\r\n    }\r\n\r\n    \r\n    async invoke<T>(outputType?: ClassConstructor<T>, doValidation = true, checkStatus = true): Promise<T | void> {\r\n        try {\r\n            // Validation logic\r\n            if (doValidation) {\r\n                if (this.functionRequirements?.inputType !== this.bodyType) {\r\n                    throw new JellyFaasException(\r\n                        `Invalid function body type. Expected ${this.functionRequirements?.inputType} but got ${this.bodyType}.\\n` +\r\n                        `To ignore this error, call invoke() with doValidation set to false.`\r\n                    );\r\n                }\r\n\r\n                switch (this.functionRequirements?.outputType) {\r\n                    case null:\r\n                    case \"NONE\":\r\n                        if (outputType) {\r\n                            throw new JellyFaasException(\r\n                                `Invalid output type. Expected no output but got ${this.getTypeName(outputType)}.\\n` +\r\n                                `To ignore this error, call invoke() with doValidation set to false.`\r\n                            );\r\n                        }\r\n                    break;\r\n                    case \"JSON\":\r\n                        if (!outputType) {\r\n                            throw new JellyFaasException(\r\n                                `Invalid output type. Expected JSON-serializable class but got ${this.getTypeName(outputType)}.\\n` +\r\n                                `To ignore this error, call invoke() with doValidation set to false.`\r\n                            );\r\n                        }\r\n                    break;\r\n                    case \"FILE\":\r\n                        if (outputType !== Buffer as unknown as ClassConstructor<Buffer>) {\r\n                            throw new JellyFaasException(\r\n                                `Invalid output type. Expected Buffer but got ${this.getTypeName(outputType)}.\\n` +\r\n                                `To ignore this error, call invoke() with doValidation set to false.`\r\n                            );\r\n                        }\r\n                    break;\r\n                    default:\r\n                        throw new JellyFaasException(\r\n                            `Unknown output type.` +\r\n                            `To ignore this error, call invoke() with doValidation set to false.`\r\n                        ); \r\n                }\r\n            }\r\n        \r\n            // Building the URL\r\n            const url = `${this.functionDNS}?${new URLSearchParams(this.queryParams).toString()}`;\r\n            const headers = {\r\n                [Client.HEADER_TOKEN]: this.config.getToken() ?? '',\r\n                'Content-Type': 'application/json',\r\n            };\r\n               \r\n            // Making the HTTP request\r\n            const response = await this.httpClient.request({\r\n                url,\r\n                method: this.functionRequirements?.requestType as string,\r\n                headers,\r\n                data: this.body,\r\n                responseType: 'arraybuffer',\r\n            });\r\n    \r\n            this.response = response;\r\n            // Status check\r\n            if (checkStatus && !(response.status >= 200 && response.status < 300)) {\r\n                throw new JellyFaasException(\r\n                    `HTTP error ${response.status}: ${response.statusText}\\n` +\r\n                    `To ignore non-2xx status code errors, call invoke() with checkStatus set to false.`\r\n                );\r\n            }\r\n            \r\n            // Handle no output\r\n            if (!outputType) {\r\n                const jsonString = Buffer.from(response.data).toString('utf-8'); // Convert ArrayBuffer to string\r\n                const jsonData = JSON.parse(jsonString); // Parse the JSON string\r\n                return jsonData;\r\n            }\r\n            \r\n            // Handle binary output\r\n            if (outputType === (Buffer as unknown as T)) {                \r\n                return Buffer.from(response.data) as T;\r\n            }\r\n            \r\n            // Handle JSON output\r\n            if (this.functionRequirements?.outputType === FunctionRequirementsBodyType.JSON) {\r\n                const jsonString = Buffer.from(response.data).toString('utf-8'); // Convert ArrayBuffer to string\r\n                const jsonData = JSON.parse(jsonString); // Parse the JSON string\r\n                \r\n                return jsonData;\r\n                // Use class-transformer to map the plain JSON to the class instance\r\n                \r\n                // const outputInstance = plainToInstance(outputType, jsonData, {\r\n                //     excludeExtraneousValues: true, // This ensures that extra properties are not assigned\r\n                //     enableImplicitConversion: true \r\n                // }) as T;\r\n\r\n                // return outputInstance; // Return the populated instance\r\n            }\r\n        } catch (error) {\r\n            if (error instanceof Error) {\r\n                throw new JellyFaasException(`Invocation failed: ${error.message}`);\r\n            } else {\r\n                throw new JellyFaasException(\"Invocation failed: Unknown error occurred\");\r\n            }\r\n        }\r\n    }\r\n        \r\n    getStatusCode(): number {\r\n        return this.response?.status ?? 0;\r\n    }\r\n\r\n    private validateQueryParams(params: Record<string, string>): void {\r\n        const schema = this.functionRequirements?.queryParams;\r\n        if (!schema) {\r\n            return;\r\n        }\r\n        schema.forEach((param) => {\r\n            if (param.required && !(param?.name as string in params)) {\r\n                throw new JellyFaasException(`Missing required query parameter: ${param.name}`);\r\n            }\r\n        });\r\n    }\r\n\r\n    private validateSchema(body: object, schema: Record<string, unknown>): void {\r\n        const ajv = new Ajv2020();\r\n        const validate: ValidateFunction = ajv.compile(schema);   \r\n        if (!validate(body)) {\r\n            const errors = validate.errors\r\n                ?.map(err => `${err.instancePath} ${err.message}`)\r\n                .join(\", \") || \"Unknown validation error\";\r\n\r\n            throw new JellyFaasException(`Schema validation failed: ${errors}`);\r\n        }\r\n    }\r\n    \r\n    private getTypeName(value: unknown): string {\r\n        if (value === null || value === undefined) {\r\n            return 'null or undefined';\r\n        }\r\n    \r\n        // If it's an object, check for `name` or `constructor`\r\n        if (typeof value === 'object') {\r\n            return (value as { name?: string; constructor?: { name: string } }).name ||\r\n                   (value as { constructor?: { name: string } }).constructor?.name ||\r\n                   'Object';\r\n        }\r\n    \r\n        // For primitive types, return their type\r\n        return typeof value;\r\n    }   \r\n}"],"mappings":"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","ignoreList":[]}