{"version":3,"file":"config.js","names":["_axios","_interopRequireDefault","require","_authResponse","e","__esModule","default","Config","AUTH_ENDPOINT","HEADER_API_KEY","apiKey","token","isAuthenticated","constructor","doDebug","httpClient","axios","create","validateStatus","init","printDebug","headers","response","get","status","Error","authResponse","AuthResponse","data","expiry","error","msg","console","log","getApiKey","getToken","getIsAuthenticated","exports"],"sources":["../src/config.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosResponse } from \"axios\";\r\nimport { AuthResponse } from \"./structs/authResponse\"; // Importing the AuthResponse class\r\n\r\n/**\r\n * Handles authentication for JellyFaaS API.\r\n * Uses an API key to authenticate and fetch a JWT for subsequent calls.\r\n */\r\nexport class Config {\r\n  private static readonly AUTH_ENDPOINT = \"https://api.jellyfaas.com/auth-service/v1/validate\";\r\n  private static readonly HEADER_API_KEY = \"x-jf-apikey\";\r\n\r\n  private apiKey: string | null = null;\r\n  private token: string | null = null;\r\n  private isAuthenticated: boolean = false;\r\n  private doDebug: boolean;\r\n  private httpClient: AxiosInstance;\r\n\r\n  /**\r\n   * Constructor to initialize the Config object and authenticate.\r\n   * @param apiKey - The JellyFaaS API key.\r\n   * @param doDebug - Whether to enable debug logging.\r\n   * @throws Error if authentication fails.\r\n   */\r\n  constructor(apiKey: string, doDebug: boolean = false) {\r\n    this.doDebug = doDebug;\r\n    this.httpClient = axios.create({\r\n      validateStatus: function () {\r\n          // Accept all HTTP statuses as \"valid\"\r\n          // Axios won't throw for non-2xx statuses.\r\n          return true;\r\n        },\r\n      });\r\n    this.apiKey = apiKey    \r\n    return (async ()=> {\r\n      await this.init()\r\n      return this;\r\n    })() as unknown as Config;\r\n  }\r\n\r\n  /**\r\n   * Authenticates using the provided API key.\r\n   * @param apiKey - The JellyFaaS API key.\r\n   * @throws Error if authentication fails or the server response is invalid.\r\n   */\r\n  public async init(): Promise<Config> {\r\n    this.printDebug(`Starting auth() method with api_key = ${this.apiKey}`);\r\n\r\n    try {\r\n      const headers = {\r\n        [Config.HEADER_API_KEY]: this.apiKey ?? '',\r\n      };\r\n\r\n      const response: AxiosResponse = await this.httpClient.get(Config.AUTH_ENDPOINT, { headers });\r\n\r\n      if (response.status === 401) {\r\n        throw new Error(\"HTTP error occurred: 401\\nInvalid API key\");\r\n      }\r\n\r\n      if (response.status !== 200) {\r\n        throw new Error(`HTTP error occurred: ${response.status}`);\r\n      }\r\n\r\n      // Deserialize the response into an AuthResponse object\r\n      const authResponse: AuthResponse = new AuthResponse(response.data.token, response.data.expiry);\r\n\r\n      if (!authResponse.token) {\r\n        throw new Error(\"Received invalid authentication data from the server\");\r\n      }\r\n\r\n      this.token = authResponse.token;\r\n      this.isAuthenticated = true;\r\n\r\n      this.printDebug(\"Successfully authenticated\");\r\n    } catch (error) {\r\n      this.printDebug(`Error during authentication: ${error}`);\r\n      throw error;\r\n    } finally {\r\n      this.printDebug(\"Finished auth() method\");\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Prints debug messages if debugging is enabled.\r\n   * @param msg - The debug message to print.\r\n   */\r\n  private printDebug(msg: string): void {\r\n    if (this.doDebug) {\r\n      console.log(msg);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the API key used for authentication.\r\n   */\r\n  public getApiKey(): string | null {\r\n    return this.apiKey;\r\n  }\r\n\r\n  /**\r\n   * Returns the JWT token after authentication.\r\n   */\r\n  public getToken(): string | null {\r\n    return this.token;\r\n  }\r\n\r\n  public getIsAuthenticated(): boolean {\r\n    return this.isAuthenticated\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]}